{{psql `
create function percent_diff(start float4, final float4) returns float4 as $$
begin
	return case
		when start=0 then float4 '+infinity'
		else              (final - start) / start * 100
	end;
end; $$ language plpgsql immutable strict;
`}}

create table sites (
	site_id        {{auto_increment}},
	parent         integer        null,

	code           varchar        not null                 check(length(code) >= 2 and length(code) <= 50),
	link_domain    varchar        not null default ''      check(link_domain = '' or (length(link_domain) >= 4 and length(link_domain) <= 255)),
	cname          varchar        null                     check(cname is null or (length(cname) >= 4 and length(cname) <= 255)),
	cname_setup_at timestamp      default null             {{check_timestamp "cname_setup_at"}},
	settings       {{jsonb}}      not null,
	user_defaults  {{jsonb}}      not null default '{}',
	received_data  integer        not null default 0,
	state          varchar        not null default 'a'     check(state in ('a', 'd')),
	created_at     timestamp      not null                 {{check_timestamp "created_at"}},
	updated_at     timestamp                               {{check_timestamp "updated_at"}},
	first_hit_at   timestamp      not null                 {{check_timestamp "first_hit_at"}}
);
create unique index "sites#code"   on sites(lower(code));
create unique index "sites#cname"  on sites(lower(cname));
create        index "sites#parent" on sites(parent);

create table users (
	user_id        {{auto_increment}},
	site_id        integer        not null,

	email          varchar        not null,
	email_verified integer        not null default 0,
	password       {{blob}}       default null,
	totp_enabled   integer        not null default 0,
	totp_secret    {{blob}},
	access         {{jsonb}}      not null default '{"all":"a"}',
	login_at       timestamp      null,
	login_request  varchar        null,
	login_token    varchar        null,
	csrf_token     varchar        null,
	email_token    varchar        null,
	reset_at       timestamp      null,
	settings       {{jsonb}}      not null default '{}',
	last_report_at timestamp      not null default current_timestamp,
	open_at        timestamp      null,

	created_at     timestamp      not null,
	updated_at     timestamp
);
create        index "users#site_id"       on users(site_id);
create unique index "users#site_id#email" on users(site_id, lower(email));

create table api_tokens (
	api_token_id   {{auto_increment}},
	site_id        integer        not null,
	user_id        integer        not null,

	name           varchar        not null,
	token          varchar        not null                 check(length(token) > 10),
	permissions    {{jsonb}}      not null,
	created_at     timestamp      not null                 {{check_timestamp "created_at"}},
	last_used_at   timestamp                               {{check_timestamp "created_at"}}
);
create unique index "api_tokens#site_id#token" on api_tokens(site_id, token);

create table hits (
	hit_id         {{auto_increment true}},
	site_id        integer        not null,
	path_id        integer        not null,
	ref_id         integer        not null default 1,

	session        {{blob}}       default null,
	first_visit    integer        default 0,
	bot            integer        default 0,

	browser_id     integer        not null,
	system_id      integer        not null,
	campaign       integer        default null,
	size_id        integer        null,
	location       varchar        not null default '',
	language       varchar,

	created_at     timestamp      not null                 {{check_timestamp "created_at"}}
);
create index "hits#site_id#created_at" on hits(site_id, created_at desc);
{{cluster "hits" "hits#site_id#created_at"}}

create table paths (
	path_id        {{auto_increment}},
	site_id        integer        not null,

	path           varchar        not null,
	title          varchar        not null default '',
	event          integer        default 0
);
create unique index "paths#site_id#path" on paths(site_id, lower(path));
create index        "paths#title"        on paths(lower(title));
{{cluster "paths" "paths#site_id#path"}}

create table campaigns (
	campaign_id    {{auto_increment}},
	site_id        integer        not null,
	name           varchar        not null
);

create table browsers (
	browser_id     {{auto_increment}},

	name           varchar,
	version        varchar
);

create table systems (
	system_id      {{auto_increment}},

	name           varchar,
	version        varchar
);

create table refs (
	ref_id         {{auto_increment}},
	ref            varchar        not null,
	ref_scheme     varchar        null
);
insert into refs (ref, ref_scheme) values ('', null);
create unique index "refs#ref#ref_scheme" on refs(lower(ref), ref_scheme);
{{psql `alter table refs cluster on "refs#ref#ref_scheme";`}}

create table sizes (
	size_id        {{auto_increment}},
	width          integer          not null,
	height         integer          not null,
	scale          double precision not null,

	size           varchar          generated always as (
		{{psql   `width::text || ',' || height::text || ',' || scale::text`}}
		{{sqlite `width || ',' || height || ',' || scale`}}
	) stored
);
create index "sizes#size" on sizes(size);
insert into sizes (width, height, scale) values (0, 0, 0);

create table hit_counts (
	site_id        integer        not null,
	path_id        integer        not null,

	hour           timestamp      not null                 {{check_timestamp "hour"}},
	total          integer        not null,

	constraint "hit_counts#site_id#path_id#hour" unique(site_id, path_id, hour) {{sqlite "on conflict replace"}}
);
create index "hit_counts#site_id#hour" on hit_counts(site_id, hour desc);
{{cluster "hit_counts" "hit_counts#site_id#hour"}}
{{replica "hit_counts" "hit_counts#site_id#path_id#hour"}}

create table ref_counts (
	site_id        integer        not null,
	path_id        integer        not null,

	ref_id         integer        not null,
	hour           timestamp      not null                 {{check_timestamp "hour"}},
	total          integer        not null,

	constraint "ref_counts#site_id#path_id#ref_id#hour" unique(site_id, path_id, ref_id, hour) {{sqlite "on conflict replace"}}
);
create index "ref_counts#site_id#hour" on ref_counts(site_id, hour asc);
{{cluster "ref_counts" "ref_counts#site_id#hour"}}
{{replica "ref_counts" "ref_counts#site_id#path_id#ref_id#hour"}}

create table hit_stats (
	site_id        integer        not null,
	path_id        integer        not null,

	day            date           not null                 {{check_date "day"}},
	stats          varchar        not null,

	constraint "hit_stats#site_id#path_id#day" unique(site_id, path_id, day) {{sqlite "on conflict replace"}}
);
create index "hit_stats#site_id#day" on hit_stats(site_id, day desc);
{{cluster "hit_stats" "hit_stats#site_id#day"}}
{{replica "hit_stats" "hit_stats#site_id#path_id#day"}}

create table browser_stats (
	site_id        integer        not null,
	path_id        integer        not null,
	browser_id     integer        not null,

	day            date           not null                 {{check_date "day"}},
	count          integer        not null,

	constraint "browser_stats#site_id#path_id#day#browser_id" unique(site_id, path_id, day, browser_id) {{sqlite "on conflict replace"}}
);
create index "browser_stats#site_id#browser_id#day" on browser_stats(site_id, browser_id, day desc);
{{cluster "browser_stats" "browser_stats#site_id#path_id#day#browser_id"}}
{{replica "browser_stats" "browser_stats#site_id#path_id#day#browser_id"}}

create table system_stats (
	site_id        integer        not null,
	path_id        integer        not null,
	system_id      integer        not null,

	day            date           not null                 {{check_date "day"}},
	count          integer        not null,

	constraint "system_stats#site_id#path_id#day#system_id" unique(site_id, path_id, day, system_id) {{sqlite "on conflict replace"}}
);
create index "system_stats#site_id#system_id#day" on system_stats(site_id, system_id, day desc);
{{cluster "system_stats" "system_stats#site_id#path_id#day#system_id"}}
{{replica "system_stats" "system_stats#site_id#path_id#day#system_id"}}

create table location_stats (
	site_id        integer        not null,
	path_id        integer        not null,

	day            date           not null                 {{check_date "day"}},
	location       varchar        not null,
	count          integer        not null,

	constraint "location_stats#site_id#path_id#day#location" unique(site_id, path_id, day, location) {{sqlite "on conflict replace"}}
);
create index "location_stats#site_id#day" on location_stats(site_id, day desc);
{{cluster "location_stats" "location_stats#site_id#day"}}
{{replica "location_stats" "location_stats#site_id#path_id#day#location"}}

create table size_stats (
	site_id        integer        not null,
	path_id        integer        not null,

	day            date           not null                 {{check_date "day"}},
	width          integer        not null,
	count          integer        not null,

	constraint "size_stats#site_id#path_id#day#width" unique(site_id, path_id, day, width) {{sqlite "on conflict replace"}}
);
create index "size_stats#site_id#day" on size_stats(site_id, day desc);
{{cluster "size_stats" "size_stats#site_id#day"}}
{{replica "size_stats" "size_stats#site_id#path_id#day#width"}}

create table language_stats (
	site_id        integer        not null,
	path_id        integer        not null,

	day            date           not null                 {{check_date "day"}},
	language       varchar        not null,
	count          integer        not null,

	constraint "language_stats#site_id#path_id#day#language" unique(site_id, path_id, day, language) {{sqlite "on conflict replace"}}
);
create index "language_stats#site_id#day" on language_stats(site_id, day desc);
{{cluster "language_stats" "language_stats#site_id#day"}}
{{replica "language_stats" "language_stats#site_id#path_id#day#language"}}

create table campaign_stats (
	site_id        integer        not null,
	path_id        integer        not null,

	day            date           not null,
	campaign_id    integer        not null,
	ref            varchar        not null,
	count          integer        not null,

	constraint "campaign_stats#site_id#path_id#campaign_id#ref#day" unique(site_id, path_id, campaign_id, ref, day) {{sqlite "on conflict replace"}}
);
create index "campaign_stats#site_id#day" on campaign_stats(site_id, day desc);
{{cluster "campaign_stats" "campaign_stats#site_id#day"}}
{{replica "campaign_stats" "campaign_stats#site_id#path_id#campaign_id#ref#day"}}

create table exports (
	export_id      {{auto_increment}},
	site_id        integer        not null,
	start_from_hit_id integer     not null,

	path           varchar        not null,
	created_at     timestamp      not null                 {{check_timestamp "created_at"}},

	finished_at    timestamp                               {{sqlite "check(finished_at is null or finished_at = strftime('%Y-%m-%d %H:%M:%S', finished_at))"}},
	last_hit_id    integer,
	num_rows       integer,
	size           varchar,
	hash           varchar,
	error          varchar
);
create index "exports#site_id#created_at" on exports(site_id, created_at);

create table locations (
	location_id    {{auto_increment}},

	iso_3166_2     varchar        generated always as (country || (case region when '' then '' else ('-' || region) end)) stored,
	country        varchar        not null,
	region         varchar        not null,
	country_name   varchar        not null,
	region_name    varchar        not null
);
create unique index "locations#iso_3166_2" on locations(iso_3166_2);
insert into locations (country, country_name, region, region_name) values ('', '(unknown)', '', ''); -- id=1 is special.

create table languages (
	iso_639_3      varchar        not null,
	name           varchar        not null
);
create unique index "languages#iso_639_3" on languages(iso_639_3);
insert into languages (iso_639_3, name) values ('', '(unknown)'); -- id=1 is special.

create table store (
	key            varchar        not null,
	value          text
);
create unique index "store#key" on store(key);
{{replica "store" "store#key"}}

create table iso_3166_1 (
	name            varchar,
	alpha2          varchar
);
create unique index "iso_3166_1#alpha2" on iso_3166_1(alpha2);


create table if not exists version (name varchar);
delete from version;
insert into version values
	-- 2.1
	('2021-03-29-1-widgets'),
	('2021-04-01-1-store-warn'),
	('2021-04-02-1-cluster-paths'),
	('2021-04-07-1-billing-anchor'),
	('2021-06-27-1-public'),
	('2021-11-15-1-user-role'),
	-- 2.2
	('2021-12-02-1-languages'),
	('2021-12-02-2-language-enable'),
	('2021-12-08-1-set-chart-text'),
	('2021-12-09-1-email-reports'),
	('2021-12-13-2-superuser'),
	('2021-12-13-1-drop-role'),
	('2022-01-13-1-unfk'),
	('2022-01-14-1-idx'),
	-- 2.3
	('2022-02-16-1-rm-billing'),
	('2022-03-06-1-campaigns'),
	('2022-10-17-1-campaigns'),
	-- 2.4
	('2022-10-21-1-apitoken-lastused'),
	('2022-11-03-1-uncount'),
	('2022-11-03-2-ununique'),
	('2022-11-05-1-paths-title'),
	-- 2.4.1
	('2022-11-15-1-correct-hit-stats'),
	-- 2.5
	('2022-11-17-1-open-at'),
	('2023-05-16-1-hits'),
	-- 2.6
	('2023-12-15-1-rm-updates'),
	('2024-08-19-1-sizes-idx'),
	('2024-08-19-1-rm-updates2'),
	('2024-04-23-1-collect-hits');

-- vim:ft=sql:tw=0
